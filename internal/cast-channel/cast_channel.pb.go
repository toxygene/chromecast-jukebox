// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cast_channel.proto

package castchannel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Always pass a version of the protocol for future compatibility
// requirements.
type CastMessage_ProtocolVersion int32

const (
	CastMessage_CASTV2_1_0 CastMessage_ProtocolVersion = 0
)

var CastMessage_ProtocolVersion_name = map[int32]string{
	0: "CASTV2_1_0",
}

var CastMessage_ProtocolVersion_value = map[string]int32{
	"CASTV2_1_0": 0,
}

func (x CastMessage_ProtocolVersion) Enum() *CastMessage_ProtocolVersion {
	p := new(CastMessage_ProtocolVersion)
	*p = x
	return p
}

func (x CastMessage_ProtocolVersion) String() string {
	return proto.EnumName(CastMessage_ProtocolVersion_name, int32(x))
}

func (x *CastMessage_ProtocolVersion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CastMessage_ProtocolVersion_value, data, "CastMessage_ProtocolVersion")
	if err != nil {
		return err
	}
	*x = CastMessage_ProtocolVersion(value)
	return nil
}

func (CastMessage_ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9ec15de9f2e74a1, []int{0, 0}
}

// What type of data do we have in this message.
type CastMessage_PayloadType int32

const (
	CastMessage_STRING CastMessage_PayloadType = 0
	CastMessage_BINARY CastMessage_PayloadType = 1
)

var CastMessage_PayloadType_name = map[int32]string{
	0: "STRING",
	1: "BINARY",
}

var CastMessage_PayloadType_value = map[string]int32{
	"STRING": 0,
	"BINARY": 1,
}

func (x CastMessage_PayloadType) Enum() *CastMessage_PayloadType {
	p := new(CastMessage_PayloadType)
	*p = x
	return p
}

func (x CastMessage_PayloadType) String() string {
	return proto.EnumName(CastMessage_PayloadType_name, int32(x))
}

func (x *CastMessage_PayloadType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CastMessage_PayloadType_value, data, "CastMessage_PayloadType")
	if err != nil {
		return err
	}
	*x = CastMessage_PayloadType(value)
	return nil
}

func (CastMessage_PayloadType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9ec15de9f2e74a1, []int{0, 1}
}

type CastMessage struct {
	ProtocolVersion *CastMessage_ProtocolVersion `protobuf:"varint,1,req,name=protocol_version,json=protocolVersion,enum=castchannel.CastMessage_ProtocolVersion" json:"protocol_version,omitempty"`
	// source and destination ids identify the origin and destination of the
	// message.  They are used to route messages between endpoints that share a
	// device-to-device channel.
	//
	// For messages between applications:
	//   - The sender application id is a unique identifier generated on behalf of
	//     the sender application.
	//   - The receiver id is always the the session id for the application.
	//
	// For messages to or from the sender or receiver platform, the special ids
	// 'sender-0' and 'receiver-0' can be used.
	//
	// For messages intended for all endpoints using a given channel, the
	// wildcard destination_id '*' can be used.
	SourceId      *string `protobuf:"bytes,2,req,name=source_id,json=sourceId" json:"source_id,omitempty"`
	DestinationId *string `protobuf:"bytes,3,req,name=destination_id,json=destinationId" json:"destination_id,omitempty"`
	// This is the core multiplexing key.  All messages are sent on a namespace
	// and endpoints sharing a channel listen on one or more namespaces.  The
	// namespace defines the protocol and semantics of the message.
	Namespace   *string                  `protobuf:"bytes,4,req,name=namespace" json:"namespace,omitempty"`
	PayloadType *CastMessage_PayloadType `protobuf:"varint,5,req,name=payload_type,json=payloadType,enum=castchannel.CastMessage_PayloadType" json:"payload_type,omitempty"`
	// Depending on payload_type, exactly one of the following optional fields
	// will always be set.
	PayloadUtf8          *string  `protobuf:"bytes,6,opt,name=payload_utf8,json=payloadUtf8" json:"payload_utf8,omitempty"`
	PayloadBinary        []byte   `protobuf:"bytes,7,opt,name=payload_binary,json=payloadBinary" json:"payload_binary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CastMessage) Reset()         { *m = CastMessage{} }
func (m *CastMessage) String() string { return proto.CompactTextString(m) }
func (*CastMessage) ProtoMessage()    {}
func (*CastMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9ec15de9f2e74a1, []int{0}
}

func (m *CastMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CastMessage.Unmarshal(m, b)
}
func (m *CastMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CastMessage.Marshal(b, m, deterministic)
}
func (m *CastMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CastMessage.Merge(m, src)
}
func (m *CastMessage) XXX_Size() int {
	return xxx_messageInfo_CastMessage.Size(m)
}
func (m *CastMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CastMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CastMessage proto.InternalMessageInfo

func (m *CastMessage) GetProtocolVersion() CastMessage_ProtocolVersion {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return CastMessage_CASTV2_1_0
}

func (m *CastMessage) GetSourceId() string {
	if m != nil && m.SourceId != nil {
		return *m.SourceId
	}
	return ""
}

func (m *CastMessage) GetDestinationId() string {
	if m != nil && m.DestinationId != nil {
		return *m.DestinationId
	}
	return ""
}

func (m *CastMessage) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *CastMessage) GetPayloadType() CastMessage_PayloadType {
	if m != nil && m.PayloadType != nil {
		return *m.PayloadType
	}
	return CastMessage_STRING
}

func (m *CastMessage) GetPayloadUtf8() string {
	if m != nil && m.PayloadUtf8 != nil {
		return *m.PayloadUtf8
	}
	return ""
}

func (m *CastMessage) GetPayloadBinary() []byte {
	if m != nil {
		return m.PayloadBinary
	}
	return nil
}

func init() {
	proto.RegisterEnum("castchannel.CastMessage_ProtocolVersion", CastMessage_ProtocolVersion_name, CastMessage_ProtocolVersion_value)
	proto.RegisterEnum("castchannel.CastMessage_PayloadType", CastMessage_PayloadType_name, CastMessage_PayloadType_value)
	proto.RegisterType((*CastMessage)(nil), "castchannel.CastMessage")
}

func init() { proto.RegisterFile("cast_channel.proto", fileDescriptor_a9ec15de9f2e74a1) }

var fileDescriptor_a9ec15de9f2e74a1 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0x4d, 0x4b, 0xc3, 0x30,
	0x18, 0xc7, 0xf7, 0xa2, 0xd3, 0x3d, 0xdd, 0x4b, 0xc9, 0x29, 0xa0, 0x87, 0x6d, 0x38, 0xd8, 0xa9,
	0xe8, 0x4e, 0x5e, 0xd7, 0x1d, 0x66, 0x0f, 0x0e, 0x49, 0xeb, 0xc0, 0x53, 0x88, 0x6d, 0xd4, 0x42,
	0x6d, 0x42, 0x93, 0x09, 0xfd, 0x38, 0x7e, 0x53, 0xd3, 0x97, 0xd1, 0x2a, 0x78, 0xcb, 0xf3, 0xe3,
	0xf7, 0x7f, 0xf2, 0xe7, 0x01, 0x14, 0x32, 0xa5, 0x69, 0xf8, 0xc1, 0xd2, 0x94, 0x27, 0x8e, 0xcc,
	0x84, 0x16, 0xc8, 0x2a, 0x58, 0x8d, 0x16, 0xdf, 0x7d, 0xb0, 0xb6, 0x66, 0x7e, 0xe4, 0x4a, 0xb1,
	0x77, 0x8e, 0x7c, 0xb0, 0x4b, 0x2b, 0x14, 0x09, 0xfd, 0xe2, 0x99, 0x8a, 0x45, 0x8a, 0xbb, 0xb3,
	0xde, 0x6a, 0xb2, 0x5e, 0x39, 0xad, 0x9c, 0xd3, 0xca, 0x38, 0x4f, 0x75, 0xe0, 0x50, 0xf9, 0x64,
	0x2a, 0x7f, 0x03, 0x74, 0x05, 0x43, 0x25, 0x8e, 0x59, 0xc8, 0x69, 0x1c, 0xe1, 0x9e, 0xd9, 0x36,
	0x24, 0x97, 0x15, 0xf0, 0x22, 0xb4, 0x84, 0x49, 0xc4, 0x95, 0x8e, 0x53, 0xa6, 0x8d, 0x5b, 0x18,
	0xfd, 0xd2, 0x18, 0xb7, 0xa8, 0xd1, 0xae, 0x61, 0x98, 0xb2, 0x4f, 0xae, 0x24, 0x0b, 0x39, 0x3e,
	0x2b, 0x8d, 0x06, 0xa0, 0x1d, 0x8c, 0x24, 0xcb, 0x13, 0xc1, 0x22, 0xaa, 0x73, 0xc9, 0xf1, 0x79,
	0x59, 0xf9, 0xe6, 0xff, 0xca, 0x95, 0x1c, 0x18, 0x97, 0x58, 0xb2, 0x19, 0xd0, 0xbc, 0x59, 0x74,
	0xd4, 0x6f, 0xf7, 0x78, 0x30, 0xeb, 0x9a, 0x9f, 0x4e, 0xca, 0xb3, 0x41, 0x45, 0xe1, 0x93, 0xf2,
	0x6a, 0xfa, 0x65, 0x39, 0xbe, 0x30, 0xd2, 0x88, 0x8c, 0x6b, 0xea, 0x96, 0x70, 0x31, 0x87, 0xe9,
	0x9f, 0xc3, 0xa0, 0x09, 0xc0, 0x76, 0xe3, 0x07, 0x87, 0x35, 0xbd, 0xa3, 0xb7, 0x76, 0x67, 0xb1,
	0x04, 0xab, 0x55, 0x04, 0x01, 0x0c, 0xfc, 0x80, 0x78, 0xfb, 0x9d, 0xdd, 0x29, 0xde, 0xae, 0xb7,
	0xdf, 0x90, 0x17, 0xbb, 0xeb, 0xf6, 0x1e, 0xfa, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xee,
	0xe9, 0x6c, 0xc9, 0x01, 0x00, 0x00,
}
